/* *
 * Métodos uteís e helpers.
 *
 * @author renantdesouza.
 * @since 22/09/2015.    
 **/
var UpGrowth = UpGrowth || {};

UpGrowth.util = {};

// Cria 'herança' de um objeto.
UpGrowth.util.extend = function(obj1, obj2) {
    return $.extend({}, obj1, obj2)
};

UpGrowth.util.handlebars = {};

// Registra os facilitadores
(UpGrowth.util.handlebars.registerHelper = function() {
    
    // Registra os métodos para realizar operações dentro dos ifs do handlebars
    Handlebars.registerHelper('operation', function(v1, operator, v2, options) {
        switch (operator) {
            case '==':
                return (v1 == v2)  ? options.fn(this) : options.inverse(this);
            case '===':
                return (v1 === v2) ? options.fn(this) : options.inverse(this);
            case '<':
                return (v1 < v2)   ? options.fn(this) : options.inverse(this);
            case '<=':
                return (v1 <= v2)  ? options.fn(this) : options.inverse(this);
            case '>':
                return (v1 > v2)   ? options.fn(this) : options.inverse(this);
            case '>=':
                return (v1 >= v2)  ? options.fn(this) : options.inverse(this);
            case '&&':
                return (v1 && v2)  ? options.fn(this) : options.inverse(this);
            case '||':
                return (v1 || v2)  ? options.fn(this) : options.inverse(this);
            default:
                return options.inverse(this);
        }
    });
    
})();

UpGrowth.util.array = {};

UpGrowth.util.array.sort = function(array, order) {
    if(!order || order == 'crescent') {
        UpGrowth.util.array.crescent(array);
    } else if(order == 'decrescent') {
        UpGrowth.util.array.decrescent(array);
    }
    return array;
};

UpGrowth.util.array.crescent = function(array, iterator) {
    if(!iterator) {
        return _.sortBy(array, iterator);
    } else {
        return _.sortBy(array, function(v) {
            return v;
        });
    }
};

UpGrowth.util.array.decrescent = function(array, ) {
    UpGrowth.util.array.crescent(array, order).inverse();
};

UpGrowth.util.array.concat = function(matrix) {
    return _.union(matrix)
};

UpGrowth.util.array.where = function(array, property) {
    return _.findWhere(array, property);
};

UpGrowth.util.array.uniq = function(array) {
    return _.uniq(array);
};

/*
ex:
    var result = _.reject([1, 2, 3, 4, 5, 6], function(num) { 
        return num % 2 == 0; 
    });
    return 1,3,5.
*/
UpGrowth.util.array.reject = function(array, fn) {
    return _.reject(array, fn);
};

/*
ex:
    var result = _.reject([1, 2, 3, 4, 5, 6], function(num) { 
        return num % 2 == 0; 
    });
    return 2,4,6.
*/
UpGrowth.util.array.filter = function(array, fn) {
    return _.filter(array, fn);
};

UpGrowth.util.array.remove = function(array1, array2) {
    _.without(array1, array2);
};
